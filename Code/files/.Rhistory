library(biomaRt)
listEnsembl()
myMart <- useEnsembl(biomart="ensembl")
myMart
available.datasets <- listDatasets(myMart)
available.datasets
View(available.datasets)
listMarts()
library(biomaRt)
listMarts()
listEnsembl()
listMarts()
myMart <- useEnsembl(biomart="ENSEMBL_MART_ENSEMBL")
available.datasets <- listDatasets(myMart)
View(available.datasets)
listMarts(host="parasite.wormbase.org")
listMarts(host="http://protists.ensembl.org/")
listMarts(host="protists.ensembl.org")
canFam <- useMart(biomart="ensembl", dataset = "cfamiliaris_gene_ensembl")
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
available.datasets <- listDatasets(myMart)
View(available.datasets)
canFam <- useMart(biomart="myMart", dataset = "cfamiliaris_gene_ensembl")
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
available.datasets <- listDatasets(myMart)
canFam <- useMart(biomart="myMart", dataset = "cfamiliaris_gene_ensembl")
canFam <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "cfamiliaris_gene_ensembl")
canFam.filters <- listFilters(canFam)
View(canFam.filters)
system("ls -l")
setwd("~/DIYtranscriptomics.github.io/Code/files")
head(Txi_gene$abundance)
counts.stats <- transform(myTPM, SD=rowSds(myTPM, na.rm=TRUE), AVG=rowMeans(myTPM), MED=rowMedians(myTPM))
myTPM <- Txi_gene$abundance
library(RColorBrewer)
nsamples <- ncol(log2.cpm)
myColors <- brewer.pal(nsamples, "Paired")
phyper(3, 13, 39, 12)
fisher.test(c(3,10,2,31),2,2), alternative='less'
fisher.test(matrix(c(3,10,2,31),2,2), alternative='less')
phyper(3, 13, 39, 12, lower.tail = TRUE)
?phyper
?fisher.test
library(GSEABase)
library(GSVA)
library(Biobase)
library(limma)
library(dplyr)
library(ggplot2)
library(reshape2)
library(readr)
library(Biostrings)
library(Biostrings)
library(tximport)
library(ensembldb)
library(EnsDb.Hsapiens.v79)
library(ggvis)
library(DT)
library(limma)
library(edgeR)
library(gplots)
library(RColorBrewer)
library(scatterD3)
library(rgl)
library(rgl)
library(pca3d)
library(rmarkdown)
library(knitr)
# Load packages ----
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(Biostrings) # we'll use this package to read in and modify our reference fasta file
library(tximport) # package for getting Kallisto results into R
# Load packages ----
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(Biostrings) # we'll use this package to read in and modify our reference fasta file
library(tximport) # package for getting Kallisto results into R
library(ensembldb) # used together with our organism-specific database package (below) to get annotation info
library(EnsDb.Hsapiens.v86) # organism-specific database package
library(sleuth) #for rapid and simple differential gene expression analysis
# Load packages ----
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(Biostrings) # we'll use this package to read in and modify our reference fasta file
library(tximport) # package for getting Kallisto results into R
library(ensembldb) # used together with our organism-specific database package (below) to get annotation info
library(EnsDb.Hsapiens.v86) # organism-specific database package
library(sleuth) #for rapid and simple differential gene expression analysis
library(beepr)
# OPTIONAL: modify reference transcriptome .fasta file ----
# depending on your reference transcriptome, we may need to edit the fasta file (but this would only need to be done once)
# Transcript identifiers should NOT have a version number appended to the ID
# this creats a problem later when we try to append annotations based on these IDs
# you would only need to edit this file once
Hs.trans <- readDNAStringSet("Homo_sapiens.GRCh38.cdna.all.fa")
library(EnsDb.Hsapiens.v86) # organism-specific database package
library(sleuth) #for rapid and simple differential gene expression analysis
library(beepr)
library(sleuth) #for rapid and simple differential gene expression analysis
# OPTIONAL: modify reference transcriptome .fasta file ----
# depending on your reference transcriptome, we may need to edit the fasta file (but this would only need to be done once)
# Transcript identifiers should NOT have a version number appended to the ID
# this creats a problem later when we try to append annotations based on these IDs
# you would only need to edit this file once
Hs.trans <- readDNAStringSet("Homo_sapiens.GRCh38.cdna.all.fa")
slotNames(Hs.trans) #look at the 'slots' in the object you just created
Hs.trans@ranges@NAMES #access one of these slots
#replace transcript names with new names that don't have decimal version number
names(Hs.trans) <- gsub("(\\.).*", "", names(Hs.trans)) #the gsub command is one of many 'grep' functions included in baseR
writeXStringSet(Hs.trans, "Hs.trans.shortnames.fasta")
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("Crypto_studyDesign.txt")
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("Crypto_studyDesign.txt")
# you can easily create file paths to the abundance files generated by Kallisto using the 'file.path' function
path <- file.path(targets$sample, "abundance.h5")
library(EnsDb.Hsapiens.v86) # organism-specific database package
library(sleuth) #for rapid and simple differential gene expression analysis
library(beepr)
# OPTIONAL: modify reference transcriptome .fasta file ----
# depending on your reference transcriptome, we may need to edit the fasta file (but this would only need to be done once)
# Transcript identifiers should NOT have a version number appended to the ID
# this creats a problem later when we try to append annotations based on these IDs
# you would only need to edit this file once
Hs.trans <- readDNAStringSet("Homo_sapiens.GRCh38.cdna.all.fa")
slotNames(Hs.trans) #look at the 'slots' in the object you just created
Hs.trans@ranges@NAMES #access one of these slots
#replace transcript names with new names that don't have decimal version number
names(Hs.trans) <- gsub("(\\.).*", "", names(Hs.trans)) #the gsub command is one of many 'grep' functions included in baseR
writeXStringSet(Hs.trans, "Hs.trans.shortnames.fasta")
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("Crypto_studyDesign.txt")
# you can easily create file paths to the abundance files generated by Kallisto using the 'file.path' function
path <- file.path(targets$sample, "abundance.h5")
# now check to make sure this path is correct by seeing if the files exist
all(file.exists(path))
# use dplyr to modify your study design to include these file paths as a new column.
# Sleuth looks for this column, which must be called 'path', in order to locate the data output from Kallisto
targets <- mutate(targets, path)
# Now you're ready to construct a sleuth object
mySleuth.genes <- sleuth_prep(targets,
target_mapping = Tx, #uncomment this line if you want to map transcripts IDs to gene symbols
aggregation_column = 'gene_name', #uncomment this line if you want to collapse your data to gene level
read_bootstrap_tpm=TRUE,
extra_bootstrap_summary=TRUE)
beep(sound = 1, expr = NULL)
# fit a linear model to the full data
mySleuth.genes <- sleuth_fit(mySleuth.genes, ~treatment2, 'full')
# for differential expression we must also fit a second 'reduced' model
mySleuth <- sleuth_fit(mySleuth, ~1, 'reduced')
# Now you're ready to construct a sleuth object
mySleuth.genes <- sleuth_prep(targets,
target_mapping = Tx, #uncomment this line if you want to map transcripts IDs to gene symbols
aggregation_column = 'gene_name', #uncomment this line if you want to collapse your data to gene level
read_bootstrap_tpm=TRUE,
extra_bootstrap_summary=TRUE)
target_id
# Load packages -----
library(tidyverse)
abundance
abundance
myCPM.stats
transcript
# Make a DGElist from your counts ----
myDGEList <- DGEList(Txi_gene$counts)
table(rowSums(DGEList$counts==0)==9)
# now set some cut-off to get rid of genes/transcripts with low counts
keepers <- rowSums(cpm>1)>=3
library("abind", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
table(rowSums(DGEList$counts==0)==9)
# now set some cut-off to get rid of genes/transcripts with low counts
keepers <- rowSums(cpm>1)>=3
DGEList.filtered <- DGEList[keepers,]
dim(DGEList.filtered)
log2.cpm.filtered <- cpm(DGEList.filtered, log=TRUE)
log2.cpm.filtered.df <- as_tibble(log2.cpm.filtered)
colnames(log2.cpm.filtered.df) <- sampleLabels
log2.cpm.filtered.df.melt <- melt(log2.cpm.filtered.df)
DGEList.filtered <- DGEList[keepers,]
dim(DGEList.filtered)
log2.cpm.filtered <- cpm(DGEList.filtered, log=TRUE)
log2.cpm.filtered.df <- as_tibble(log2.cpm.filtered)
colnames(log2.cpm.filtered.df) <- sampleLabels
log2.cpm.filtered.df.melt <- melt(log2.cpm.filtered.df)
Log2.cpm.df.melt
List.filtered, log=TRUE)
log2.cpm.filtered.df <- as_tibble(log2.cpm.filtered)
colnames(log2.cpm.filtered.df) <- sampleLabels
log2.cpm.filtered.df.melt <- melt(log2.cpm.filtered.df)
log2.cpm.filtered.df.mel
# Load packages ----
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(Biostrings) # we'll use this package to read in and modify our reference fasta file
library(tximport) # package for getting Kallisto results into R
library(ensembldb) # used together with our organism-specific database package (below) to get annotation info
