---
title: 'Making your analysis portable and reproducible'
subtitle: 'Lecture 12 â€¢  watch by April 5, 2023'
date: 2018-12-30 00:00:00
description: Reproducing an analysis requires more than just code. You need the original raw data, access to the appropriate programming languages, and application specific packages (and often specific versions of these packages).  This poses a major impediment to reproducibility, even for researchers with a background in bioinformatics.  To address this challenge, you'll learn how to 'containerize'  your data, scripts and software, making it easy to share and rerun an entire analysis with the push of a button.
featured_image: '/images/capsule.jpg'
---

<div style="text-align: right"> Image credit: 'Emoh: sculpture / time capsule & temporary home' by Loren Naji </div>

[Lecture slides on iCloud](https://www.icloud.com/keynote/0gPGSkggD-NUmJUg9tSyFis2w#Lecture13%5Freproducibility)

## Overview

Reproducing an analysis requires more than just code. You need the original raw data, access to the appropriate programming languages, and application specific packages (and often specific versions of these packages).  This poses a major impediment to reproducibility, even for researchers with a background in bioinformatics.  To address this challenge, you'll learn how to 'containerize'  your data, scripts and software, making it easy to share and rerun an entire analysis with the push of a button.

## Learning objectives

* Learn how to make your research analyses reproducible
* Create a reproducible package environment with [renv](https://rstudio.github.io/renv/articles/renv.html)
* Share your project via [GitHub](https://github.com/) and git
* Understand how to streamline code using custom R functions.
* Share your work as an R package
* Discuss the basics of Docker and containerized software

## What you need to do

* Sign-up for a free [GitHub](https://github.com/) account (doesn't matter which email you use)
* [Download this gitignore file](https://drive.google.com/open?id=13HhGnxAjCJilQNFHrIkBjGceXP6hZmKQ) - useful for updating your own .gitignore file in a project repo
* [Download this script](http://DIYtranscriptomics.github.io/Code/files/buildPkg.R) that walks through how to turn any analysis project into an R package. You may also want this [text file](http://DIYtranscriptomics.github.io/Code/files/pkgDocs.txt) as a simple starting point for data documentation, and [this function file](http://DIYtranscriptomics.github.io/Code/files/DIYprofile.R) also as an example.

## Lecture videos

### Part 1 - Reproducibility via the renv package

<iframe src="https://player.vimeo.com/video/426273940" width="640" height="268" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>

### Part 2 - Connecting your project to GitHub

<iframe src="https://player.vimeo.com/video/426287346" width="640" height="268" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>

### Part 3 - Keeping your code clean via custom functions

<iframe src="https://player.vimeo.com/video/426552841" width="640" height="268" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>

### Part 4 - How to turn your analysis project into a stand alone R package

<iframe src="https://player.vimeo.com/video/427243128" width="640" height="268" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>

---

## Reading

[Happy Git and GitHub with RStudio](https://happygitwithr.com/) - Jenny Bryan and team walk through every step of how to install git, connect to GitHub and access version control from within RStudio.

There's a lot of reading material for how to get started making functions and packages.  Beyond the extensive and very well written [book on building R packages](http://r-pkgs.had.co.nz/) and excellent documentation for the [usethis package](https://usethis.r-lib.org/), you may also want to check out some great lab posts on making R packages ([here](https://masalmon.eu/2017/12/11/goodrpackages/), [here](https://r-mageddon.netlify.app/post/writing-an-r-package-from-scratch/), [here](https://tinyheero.github.io/jekyll/update/2015/07/26/making-your-first-R-package.html), and [here](https://kbroman.org/pkg_primer/)).

[Code Ocean whitepaper](http://DIYtranscriptomics.github.io/Reading/files/codeOcean_whitepaper.pdf) - describes the need for better tools for reproducible research and introduces their cloud-based computational platform for addressing this need.

[Intro to Docker](https://docker-curriculum.com/) - Code Ocean is based on Docker, a free and open-source tool that allows you to 'build, share and run applications anywhere'.

[Code Ocean On-boarding document](https://docs.google.com/document/d/1baA8IRFDZE1rJNB3SYk7Aksvuz5AJ9W4HG2iqYoPt-8/edit?usp=sharing) - Step-by-step details for how to set-up your own capsule.

[Our recent paper](https://stm.sciencemag.org/content/11/519/eaax4204), showing a code capsule embedded directly in the joural webpage (a first for any AAAS journal).

[Google Collaboratory](https://colab.research.google.com/) - Write, edit and share Python code directly in your browser

---


